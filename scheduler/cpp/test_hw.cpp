#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <stdint.h>
#include <unistd.h>

#include "SchedulerTopIndication.h"
#include "SchedulerTopRequest.h"
#include "GeneratedTypes.h"

#define NUM_OF_SERVERS 2

static uint32_t server_index = 0;
static SchedulerTopRequestProxy *device = 0;

class SchedulerTopIndication : public SchedulerTopIndicationWrapper
{
public:
    virtual void set_interval_outcome(uint8_t op_outcome) {
        if (op_outcome == 0) {
            fprintf(stderr, "Error while trying to set the slot interval.\n");
		} else {
			fprintf(stderr, "Interval successfully set.\n");
		}
	}

    virtual void get_interval_outcome(uint64_t interval, uint8_t op_outcome) {
        if (op_outcome == 1) {
			fprintf(stderr, "slot interval = %lu\n", interval);
        } else {
            fprintf(stderr, "Error while trying to get the slot interval.\n");
        }
    }

    virtual void insert_outcome(uint8_t op_outcome) {
        if (op_outcome == 0) {
            fprintf(stderr, "Error while trying to insert into the table.\n");
        }
    }

    virtual void display_outcome
		(uint32_t server_ip, uint64_t server_mac, uint8_t op_outcome) {
        if (op_outcome == 1) {
            fprintf(stderr, "IP = %x  MAC = %lx\n", server_ip, server_mac);
        } else {
			fprintf(stderr, "Error occured while displaying table content\n");
		}
    }

	virtual void display_scheduler_stats(uint64_t num_of_time_slots_used,
			                             uint64_t host_pkt_transmitted,
										 uint64_t non_host_pkt_transmitted) {
		fprintf(stderr, "TIME SLOTS = %lu HOST PKT = %lu NON HOST PKT = %lu\n",
		  num_of_time_slots_used, host_pkt_transmitted, non_host_pkt_transmitted);
	}

	virtual void display_dma_stats(uint64_t num_of_pkt_generated) {
	   fprintf(stderr, "Num of pkt generated by DMA = %lu\n",num_of_pkt_generated);
	}

	virtual void debug_dma(uint32_t dst_index) {
		fprintf(stderr, "[DMA] Sending to dst index = %d\n", dst_index);
	}

	virtual void debug_sched(uint8_t sop, uint8_t eop, uint64_t data_high,
			                 uint64_t data_low) {
		fprintf(stderr,"[SCHED] CONSUMING %d %d %016lx %016lx\n",
				                      sop, eop, data_high, data_low);
	}

	virtual void debug_mac_tx(uint8_t sop, uint8_t eop, uint64_t data) {
		fprintf(stderr,"[MAC] SENDING %d %d %016lx\n", sop, eop, data);
	}

	virtual void debug_mac_rx(uint8_t sop, uint8_t eop, uint64_t data) {
		fprintf(stderr,"[MAC] RECEIVED %d %d %016lx\n", sop, eop, data);
	}

    SchedulerTopIndication(unsigned int id) : SchedulerTopIndicationWrapper(id) {}
};

void configure_scheduler(SchedulerTopRequestProxy* device) {
	for (uint32_t i = NUM_OF_SERVERS; i > 0; i--) {
		uint32_t idx = (i + server_index) % NUM_OF_SERVERS;
		device->insert(idx);
	}
	for (uint32_t i = 0; i < NUM_OF_SERVERS; i++) {
		device->display(i);
	}
	device->set_interval(16);
	sleep(5);
	//device->debug();
	device->start_scheduler_and_dma(server_index, 3, 64);
}

int main(int argc, char **argv)
{
    SchedulerTopIndication echoIndication(IfcNames_SchedulerTopIndicationH2S);
    device = new SchedulerTopRequestProxy(IfcNames_SchedulerTopRequestS2H);

    configure_scheduler(device);

	//sleep(600);

	//device->stop_scheduler();

    while(1);
    return 0;
}
